// <auto-generated />
using IsTakip.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IsTakip.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IsTakip.Core.Classes.BuinessClasses.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessNote")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BusinessPriority")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderNo")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<int>("EndNoticeSituation")
                        .HasColumnType("int");

                    b.Property<string>("MaterialNote")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfferNo")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<int>("OfferType")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductionOrder")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Workmanship")
                        .HasColumnType("int");

                    b.Property<int>("materialType")
                        .HasColumnType("int");

                    b.Property<int>("thickness")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessNote = "It should be delivered within one week",
                            BusinessPriority = 1,
                            CustomerId = 1,
                            CustomerOrderNo = 1,
                            EndNoticeSituation = 0,
                            MaterialNote = "There is no additional İnformation.",
                            OfferNo = 89765432,
                            OfferType = 0,
                            Price = 250.00m,
                            ProductionOrder = 0,
                            SupplierId = 1,
                            Workmanship = 0,
                            materialType = 0,
                            thickness = 2
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.BuinessClasses.Jobfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("JobfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("Jobfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessId = 1,
                            JobfileName = "Order Inluding Playstations"
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.BuinessClasses.ProductionLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeadTime")
                        .HasColumnType("int");

                    b.Property<int>("productionLeadType")
                        .HasColumnType("int");

                    b.Property<int>("productionOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductionLeads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeadTime = 87,
                            productionLeadType = 0,
                            productionOrder = 0
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Explanation = "The additional information has been given to partner about their business."
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CustomerClassId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerRepresentativeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Explanation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("customerRestriction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerClassId");

                    b.HasIndex("CustomerRepresentativeId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "İstinye ShoppingMall, -1. Floor, Istanbul/Turkey",
                            CustomerClassId = 1,
                            CustomerRepresentativeId = 1,
                            Description = "Tarlacılar AŞ.",
                            Email = "tarlacılar@gmail.com",
                            Explanation = "Outlet Store in Europian Side of Istanbul",
                            PhoneNumber = "05447986543",
                            TaxAdministration = "Şişli Tax Administration",
                            TaxNumber = 1928374650,
                            UserId = 1,
                            customerRestriction = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Cevahir ShoppingMall, 2. Floor, Istanbul/Turkey",
                            CustomerClassId = 2,
                            CustomerRepresentativeId = 2,
                            Description = "Akmel AŞ.",
                            Email = "akmel@gmail.com",
                            Explanation = "Local Partner in Europian Side of Istanbul",
                            PhoneNumber = "05438974562",
                            TaxAdministration = "Besiktas Tax Administration",
                            TaxNumber = 1928374651,
                            UserId = 2,
                            customerRestriction = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Onur OfisPark Plaza, 3. Floor, Istanbul/Turkey",
                            CustomerClassId = 1,
                            CustomerRepresentativeId = 3,
                            Description = "Teknosa",
                            Email = "teknosa@gmail.com",
                            Explanation = "Crucial Partner in Europian Side of Istanbul",
                            PhoneNumber = "05437674562",
                            TaxAdministration = "Kadıköy Tax Administration",
                            TaxNumber = 1928374653,
                            UserId = 3,
                            customerRestriction = 0
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.CustomerClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("CustomerClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Key Accounts",
                            Explanation = "Partial Partners for our Company"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Channel Accounts",
                            Explanation = "Local Partners for our Company"
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.CustomerRepresentative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("customerRepresentatives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Email = "kemalozturk@gmail.com",
                            Name = "Kemal",
                            PhoneNumber = "05302427531",
                            Surname = "Öztürk"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Email = "eraybaydur@gmail.com",
                            Name = "Eray",
                            PhoneNumber = "05302486592",
                            Surname = "Baydur"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            Email = "serkanklnckp@gmail.com",
                            Name = "Serkan",
                            PhoneNumber = "05362428531",
                            Surname = "Kılıçkap"
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.SupplierClass.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "SONY Turkey",
                            Email = "sonyturkey@sony.com",
                            Explanation = "Supplier for Electronic stuff. ",
                            PhoneNumber = "02169875643"
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.UserClasses.MailParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MailParameters");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.UserClasses.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MailNotification")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("RoleDescription")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            MailNotification = 0,
                            Name = "Kemal",
                            RoleDescription = 0,
                            Surname = "Öztürk",
                            UserCode = "Kemalztrk",
                            UserPassword = "Kemal1234"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            MailNotification = 1,
                            Name = "Eray",
                            RoleDescription = 1,
                            Surname = "Baydur",
                            UserCode = "Eraybydr",
                            UserPassword = "Eray1234"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            MailNotification = 0,
                            Name = "Serkan",
                            RoleDescription = 3,
                            Surname = "Kılıçkap",
                            UserCode = "Serkanklnckp",
                            UserPassword = "Serkan1234"
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.WareHouseInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int");

                    b.Property<int>("WareHouseShelfId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("materialType")
                        .HasColumnType("int");

                    b.Property<int>("thickness")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WareHouseId");

                    b.HasIndex("WareHouseShelfId");

                    b.ToTable("wareHouseInventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2.3m,
                            CustomerId = 1,
                            Explanation = "There is sufficient stock.",
                            Length = 10.2m,
                            SupplierId = 1,
                            WareHouseId = 1,
                            WareHouseShelfId = 1,
                            Weight = 0.6m,
                            Width = 12.5m,
                            materialType = 0,
                            thickness = 0
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.WareHouseShelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WareHouseId");

                    b.ToTable("wareHouseShelves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Block A",
                            Explanation = "Electronical Side",
                            WareHouseId = 1
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Officer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OfficerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "SONY Warehouse",
                            Explanation = "Electronical Side",
                            Officer = "Ziya Duran",
                            OfficerPhone = "05436785432"
                        });
                });

            modelBuilder.Entity("IsTakip.Core.Classes.BuinessClasses.Business", b =>
                {
                    b.HasOne("IsTakip.Core.Classes.CustomerClasses.Customer", "Customer")
                        .WithMany("Businesses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IsTakip.Core.Classes.SupplierClass.Supplier", "Supplier")
                        .WithMany("businesses")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.BuinessClasses.Jobfile", b =>
                {
                    b.HasOne("IsTakip.Core.Classes.BuinessClasses.Business", "Business")
                        .WithOne("Jobfile")
                        .HasForeignKey("IsTakip.Core.Classes.BuinessClasses.Jobfile", "BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.Agenda", b =>
                {
                    b.HasOne("IsTakip.Core.Classes.CustomerClasses.Customer", "Customer")
                        .WithMany("Agenda")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.Customer", b =>
                {
                    b.HasOne("IsTakip.Core.Classes.CustomerClasses.CustomerClass", "Customerclass")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IsTakip.Core.Classes.CustomerClasses.CustomerRepresentative", "CustomerRepresentative")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRepresentativeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IsTakip.Core.Classes.UserClasses.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerRepresentative");

                    b.Navigation("Customerclass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.WareHouseInventory", b =>
                {
                    b.HasOne("IsTakip.Core.Classes.CustomerClasses.Customer", "Customer")
                        .WithMany("wareHouseInventories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IsTakip.Core.Classes.SupplierClass.Supplier", "Supplier")
                        .WithMany("wareHouseInventories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IsTakip.Core.Classes.WareHouseClasses.Warehouse", "Warehouse")
                        .WithMany("wareHouseInventories")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IsTakip.Core.Classes.WareHouseClasses.WareHouseShelf", "Shelf")
                        .WithMany("wareHouseInventories")
                        .HasForeignKey("WareHouseShelfId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Shelf");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.WareHouseShelf", b =>
                {
                    b.HasOne("IsTakip.Core.Classes.WareHouseClasses.Warehouse", "Warehouse")
                        .WithMany("Shelfs")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.BuinessClasses.Business", b =>
                {
                    b.Navigation("Jobfile")
                        .IsRequired();
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.Customer", b =>
                {
                    b.Navigation("Agenda");

                    b.Navigation("Businesses");

                    b.Navigation("wareHouseInventories");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.CustomerClass", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.CustomerClasses.CustomerRepresentative", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.SupplierClass.Supplier", b =>
                {
                    b.Navigation("businesses");

                    b.Navigation("wareHouseInventories");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.UserClasses.User", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.WareHouseShelf", b =>
                {
                    b.Navigation("wareHouseInventories");
                });

            modelBuilder.Entity("IsTakip.Core.Classes.WareHouseClasses.Warehouse", b =>
                {
                    b.Navigation("Shelfs");

                    b.Navigation("wareHouseInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
